{"version":3,"file":"static/js/427.b1b889b2.chunk.js","mappings":"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","sources":["components/ButtonSubmit/ButtonSubmit.styled.jsx","components/ButtonSubmit/ButtonSubmit.jsx","components/RegisterForm/RegisterForm.styled.jsx","components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SubmitBtn = styled.button`\n  font-size: 14px;\n  border-radius: 4px;\n  border: 1px solid ${p => p.theme.colors.gray};\n  text-transform: uppercase;\n  font-weight: 700;\n  padding: 8px;\n  color: ${p => p.theme.colors.orange};\n  background-color: ${p => p.theme.colors.white};\n  margin-bottom: 30px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: ${p => p.theme.colors.orange};\n    color: ${p => p.theme.colors.white};\n    box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.1);\n    border: 1px solid ${p => p.theme.colors.white};\n  }\n`;\n","import { SubmitBtn } from './ButtonSubmit.styled';\n\nexport const ButtonSubmit = ({ type = 'submit', children, ...otherProps }) => {\n  return (\n    <SubmitBtn type={type} {...otherProps}>\n      {children}\n    </SubmitBtn>\n  );\n};\n","import styled from 'styled-components';\nimport {\n  Field as FormikField,\n  Form as FormikForm,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\nimport { Link as StyledLink } from 'react-router-dom';\n\nexport const Form = styled(FormikForm)`\n  width: 320px;\n`;\n\nexport const Title = styled.h1`\n  margin-bottom: 30px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n`;\n\nexport const Field = styled(FormikField)`\n  font-size: 16px;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n  color: ${p => p.theme.colors.error};\n`;\n\nexport const Link = styled(StyledLink)`\n  display: inline-block;\n  border: 1px solid black;\n  border-radius: 4px;\n  text-decoration: none;\n  padding: 8px;\n  font-weight: 700;\n  color: #2a363b;\n\n  font-size: 14px;\n  border: 1px solid ${p => p.theme.colors.gray};\n  text-transform: uppercase;\n  font-weight: 700;\n  color: ${p => p.theme.colors.orange};\n  margin-left: 10px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: ${p => p.theme.colors.orange};\n    color: ${p => p.theme.colors.white};\n    box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.1);\n    border: 1px solid ${p => p.theme.colors.white};\n  }\n`;\n","import { Formik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/authOperations';\nimport * as Yup from 'yup';\nimport {\n  Form,\n  Label,\n  Field,\n  ErrorMessage,\n  Title,\n  Link,\n} from './RegisterForm.styled';\nimport { ButtonSubmit } from 'components/ButtonSubmit/ButtonSubmit';\n\nconst RegistrationScheme = Yup.object({\n  name: Yup.string()\n    .min(3, 'Name should contain 3 characters as min')\n    .max(10, 'Name should contain 10 characters as max')\n    .required('Required'),\n  email: Yup.string().email('Invalid email address').required('Required'),\n  password: Yup.string()\n    .min(8, 'Password must contain 8 characters as min')\n    .matches(/[a-zA-Z]/, 'Password must contain at least one Latin letter')\n    .required('Required'),\n});\n\nexport const RegisterForm = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <Title>Registration form</Title>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        validationSchema={RegistrationScheme}\n        onSubmit={(values, actions) => {\n          dispatch(register(values));\n          actions.resetForm();\n        }}\n      >\n        <Form autoComplete=\"off\">\n          <Label>\n            Username\n            <Field type=\"text\" name=\"name\" placeholder=\"John\" />\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </Label>\n          <Label>\n            Email\n            <Field type=\"email\" name=\"email\" placeholder=\"john@gmail.com\" />\n            <ErrorMessage name=\"email\" component=\"span\" />\n          </Label>\n          <Label>\n            <Field type=\"password\" name=\"password\" placeholder=\"********\" />\n            <ErrorMessage name=\"password\" component=\"span\" />\n          </Label>\n          <ButtonSubmit type=\"submit\">Register</ButtonSubmit>\n        </Form>\n      </Formik>\n\n      <p>\n        Already have an account? Let's <Link to=\"/login\">Log In!</Link>\n      </p>\n    </div>\n  );\n};\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <div>\n      <title>Registration</title>\n      <RegisterForm />\n    </div>\n  );\n};\n\nexport default Register;\n"],"names":["SubmitBtn","styled","_templateObject","_taggedTemplateLiteral","p","theme","colors","gray","orange","white","ButtonSubmit","_ref","_ref$type","type","children","otherProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Form","FormikForm","Title","_templateObject2","Label","_templateObject3","Field","FormikField","_templateObject4","ErrorMessage","FormikErrorMessage","_templateObject5","error","Link","StyledLink","_templateObject6","RegistrationScheme","Yup","name","min","max","required","email","password","matches","RegisterForm","dispatch","useDispatch","_jsxs","Formik","initialValues","validationSchema","onSubmit","values","actions","register","resetForm","autoComplete","placeholder","component","to"],"sourceRoot":""}