{"version":3,"file":"static/js/674.f7fffda2.chunk.js","mappings":"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","sources":["components/ButtonSubmit/ButtonSubmit.styled.jsx","components/ButtonSubmit/ButtonSubmit.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Contact/Contact.styled.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const SubmitBtn = styled.button`\n  font-size: 14px;\n  border-radius: 4px;\n  border: 1px solid ${p => p.theme.colors.gray};\n  text-transform: uppercase;\n  font-weight: 700;\n  padding: 8px;\n  color: ${p => p.theme.colors.orange};\n  background-color: ${p => p.theme.colors.white};\n  margin-bottom: 30px;\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: ${p => p.theme.colors.orange};\n    color: ${p => p.theme.colors.white};\n    box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.1);\n    border: 1px solid ${p => p.theme.colors.white};\n  }\n`;\n","import { SubmitBtn } from './ButtonSubmit.styled';\n\nexport const ButtonSubmit = ({ type = 'submit', children, ...otherProps }) => {\n  return (\n    <SubmitBtn type={type} {...otherProps}>\n      {children}\n    </SubmitBtn>\n  );\n};\n","import styled from 'styled-components';\nimport {\n  Field as FormikField,\n  Form as FormikForm,\n  ErrorMessage as FormikErrorMessage,\n} from 'formik';\n\nexport const Title = styled.h1`\n  margin-bottom: 30px;\n`;\n\nexport const Form = styled(FormikForm)`\n  max-width: 400px;\n  padding: 8px;\n  border: 1px solid #2a2a2a;\n  border-radius: 2px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Field = styled(FormikField)`\n  font-size: 16px;\n`;\n\nexport const ErrorMessage = styled(FormikErrorMessage)`\n  font-size: 14px;\n  color: ${p => p.theme.colors.error};\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { createContact } from '../../redux/contacts/contactsOperations';\nimport toast from 'react-hot-toast';\n\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  FormLabel,\n  Form,\n  Field,\n  ErrorMessage,\n  Title,\n} from './ContactForm.styled';\nimport { selectContacts } from 'redux/selectors';\nimport { ButtonSubmit } from 'components/ButtonSubmit/ButtonSubmit';\n\nconst ContactScheme = Yup.object().shape({\n  name: Yup.string()\n    .matches(\n      /(^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$)/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required('Required!'),\n  number: Yup.string()\n    .matches(\n      /(\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9})/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required('Required!'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <div>\n      <Title>Phonebook</Title>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        validationSchema={ContactScheme}\n        onSubmit={(values, actions) => {\n          if (contacts.find(contact => contact.name === values.name)) {\n            toast.error(`${values.name} is already in contacts.`);\n            return;\n          }\n          dispatch(createContact(values, values.name));\n          actions.resetForm();\n        }}\n      >\n        <Form>\n          <FormLabel>\n            Name\n            <Field name=\"name\" placeholder=\"Jane Smith\" autoComplete=\"off\" />\n            <ErrorMessage name=\"name\" component=\"span\" />\n          </FormLabel>\n          <FormLabel>\n            Number\n            <Field name=\"number\" placeholder=\"111-11-11\" autoComplete=\"off\" />\n            <ErrorMessage name=\"number\" component=\"span\" />\n          </FormLabel>\n          <ButtonSubmit type=\"submit\">Add contact</ButtonSubmit>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactItem = styled.div`\n  display: flex;\n  justify-content: space-between;\n  gap: 20px;\n  margin-bottom: 10px;\n`;\n\nexport const Name = styled.div`\n  font-size: 14px;\n\n  @media screen and (min-width: 420px) {\n    font-size: 16px;\n  }\n\n  @media screen and (min-width: 620px) {\n    font-size: 18px;\n  }\n`;\n\nexport const Button = styled.button`\n  font-size: 14px;\n  height: 24px;\n  border-radius: 4px;\n  text-transform: uppercase;\n  font-weight: 700;\n  border: 1px solid ${p => p.theme.colors.gray};\n  background-color: ${p => p.theme.colors.white};\n  color: ${p => p.theme.colors.orange};\n  transition: background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover {\n    background-color: ${p => p.theme.colors.orange};\n    color: ${p => p.theme.colors.white};\n    box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.1);\n    border: 1px solid ${p => p.theme.colors.white};\n  }\n`;\n","import { deleteContact } from '../../redux/contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport { Button, ContactItem, Name } from './Contact.styled';\nimport PropTypes from 'prop-types';\n\nexport const Contact = ({ contact: { name, number, id } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <ContactItem>\n      <Name>\n        {name} : {number}\n      </Name>\n      <Button onClick={() => dispatch(deleteContact(id))}>Delete</Button>\n    </ContactItem>\n  );\n};\n\nContact.propTypes = {\n  contact: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 600px;\n  margin-right: auto;\n  padding: 15px;\n`;\n\nexport const ErrorMsg = styled.div`\n  color: ${p => p.theme.colors.error};\n  font-size: 16px;\n  margin-top: 30px;\n`;\n","import { Contact } from 'components/Contact/Contact';\nimport { Container, ErrorMsg } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContactsToShow,\n  selectError,\n  selectIsLoading,\n} from 'redux/selectors';\nimport { useEffect } from 'react';\nimport { getContacts } from 'redux/contacts/contactsOperations';\nimport Loader from 'components/Loader/Loader';\n\nexport const ContactsList = () => {\n  const contactsToShow = useSelector(selectContactsToShow);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <h2>Contacts</h2>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <ul>\n          {contactsToShow?.map(contact => (\n            <li key={contact.id}>\n              <Contact contact={contact} />\n            </li>\n          ))}\n        </ul>\n      )}\n\n      {!contactsToShow?.length && !error && !isLoading && (\n        <ErrorMsg>There are no contacts in your Phonebook.</ErrorMsg>\n      )}\n\n      {error && <ErrorMsg>{error}</ErrorMsg>}\n    </Container>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterField = styled.div`\n  padding: 20px 0;\n`;\n\nexport const Input = styled.input`\n  margin: 10px;\n  :focus {\n    box-shadow: 0px 2px 10px 2px rgba(0, 0, 0, 0.1);\n  }\n`;\n","import { FilterField, Input } from './Filter.styled';\nimport { findContact } from '../../redux/filter/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from '../../redux/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const name = e => {\n    dispatch(findContact(e.currentTarget.value.toLowerCase()));\n  };\n\n  return (\n    <FilterField>\n      <label>\n        Find contact by name\n        <Input type=\"text\" name=\"filter\" value={filter} onChange={name} />\n      </label>\n    </FilterField>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactsList } from 'components/ContactList/ContactList';\nimport { Filter } from 'components/Filter/Filter';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactsOperations';\nimport { selectIsLoading } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(getContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <title>Your PhoneBook</title>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactsList />\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["SubmitBtn","styled","_templateObject","_taggedTemplateLiteral","p","theme","colors","gray","orange","white","ButtonSubmit","_ref","_ref$type","type","children","otherProps","_objectWithoutProperties","_excluded","_jsx","_objectSpread","Title","Form","FormikForm","_templateObject2","FormLabel","_templateObject3","Field","FormikField","_templateObject4","ErrorMessage","FormikErrorMessage","_templateObject5","error","ContactScheme","Yup","shape","name","matches","required","number","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","_jsxs","Formik","initialValues","validationSchema","onSubmit","values","actions","find","contact","toast","concat","createContact","resetForm","placeholder","autoComplete","component","ContactItem","Name","Button","Contact","_ref$contact","id","onClick","deleteContact","Container","ErrorMsg","ContactsList","contactsToShow","selectContactsToShow","isLoading","selectIsLoading","selectError","useEffect","getContacts","Loader","map","length","FilterField","Input","Filter","filter","selectFilter","value","onChange","e","findContact","currentTarget","toLowerCase"],"sourceRoot":""}